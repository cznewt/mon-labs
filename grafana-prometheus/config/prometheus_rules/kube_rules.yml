{
   "groups": [
      {
         "name": "kube-apiserver.rules",
         "rules": [
            {
               "expr": "sum(rate(apiserver_request_duration_seconds_sum{subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) without(instance, pod)\n/\nsum(rate(apiserver_request_duration_seconds_count{subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) without(instance, pod)\n",
               "record": "cluster:apiserver_request_duration_seconds:mean5m"
            },
            {
               "expr": "histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\"kube-apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.99"
               },
               "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.9, sum(rate(apiserver_request_duration_seconds_bucket{job=\"kube-apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.9"
               },
               "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.5, sum(rate(apiserver_request_duration_seconds_bucket{job=\"kube-apiserver\",subresource!=\"log\",verb!~\"LIST|WATCH|WATCHLIST|PROXY|CONNECT\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.5"
               },
               "record": "cluster_quantile:apiserver_request_duration_seconds:histogram_quantile"
            }
         ]
      },
      {
         "name": "k8s.rules",
         "rules": [
            {
               "expr": "sum(rate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\", container!=\"POD\"}[5m])) by (namespace)\n",
               "record": "namespace:container_cpu_usage_seconds_total:sum_rate"
            },
            {
               "expr": "sum by (cluster, namespace, pod, container) (\n  rate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\", container!=\"POD\"}[5m])\n) * on (cluster, namespace, pod) group_left(node) max by(cluster, namespace, pod, node) (kube_pod_info)\n",
               "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate"
            },
            {
               "expr": "container_memory_working_set_bytes{job=\"cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)\n",
               "record": "node_namespace_pod_container:container_memory_working_set_bytes"
            },
            {
               "expr": "container_memory_rss{job=\"cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)\n",
               "record": "node_namespace_pod_container:container_memory_rss"
            },
            {
               "expr": "container_memory_cache{job=\"cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)\n",
               "record": "node_namespace_pod_container:container_memory_cache"
            },
            {
               "expr": "container_memory_swap{job=\"cadvisor\", image!=\"\"}\n* on (namespace, pod) group_left(node) max by(namespace, pod, node) (kube_pod_info)\n",
               "record": "node_namespace_pod_container:container_memory_swap"
            },
            {
               "expr": "sum(container_memory_usage_bytes{job=\"cadvisor\", image!=\"\", container!=\"POD\"}) by (namespace)\n",
               "record": "namespace:container_memory_usage_bytes:sum"
            },
            {
               "expr": "sum by (namespace) (\n    sum by (namespace, pod) (\n        max by (namespace, pod, container) (\n            kube_pod_container_resource_requests_memory_bytes{job=\"kube-state-metrics\"}\n        ) * on(namespace, pod) group_left() max by (namespace, pod) (\n            kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
               "record": "namespace:kube_pod_container_resource_requests_memory_bytes:sum"
            },
            {
               "expr": "sum by (namespace) (\n    sum by (namespace, pod) (\n        max by (namespace, pod, container) (\n            kube_pod_container_resource_requests_cpu_cores{job=\"kube-state-metrics\"}\n        ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n        )\n    )\n)\n",
               "record": "namespace:kube_pod_container_resource_requests_cpu_cores:sum"
            },
            {
               "expr": "sum(\n  label_replace(\n    label_replace(\n      kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"},\n      \"replicaset\", \"$1\", \"owner_name\", \"(.*)\"\n    ) * on(replicaset, namespace) group_left(owner_name) kube_replicaset_owner{job=\"kube-state-metrics\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n) by (cluster, namespace, workload, pod)\n",
               "labels": {
                  "workload_type": "deployment"
               },
               "record": "mixin_pod_workload"
            },
            {
               "expr": "sum(\n  label_replace(\n    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n) by (cluster, namespace, workload, pod)\n",
               "labels": {
                  "workload_type": "daemonset"
               },
               "record": "mixin_pod_workload"
            },
            {
               "expr": "sum(\n  label_replace(\n    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"},\n    \"workload\", \"$1\", \"owner_name\", \"(.*)\"\n  )\n) by (cluster, namespace, workload, pod)\n",
               "labels": {
                  "workload_type": "statefulset"
               },
               "record": "mixin_pod_workload"
            }
         ]
      },
      {
         "name": "kube-scheduler.rules",
         "rules": [
            {
               "expr": "histogram_quantile(0.99, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.99"
               },
               "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.99, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.99"
               },
               "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.99, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.99"
               },
               "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.9, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.9"
               },
               "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.9, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.9"
               },
               "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.9, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.9"
               },
               "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.5, sum(rate(scheduler_e2e_scheduling_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.5"
               },
               "record": "cluster_quantile:scheduler_e2e_scheduling_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.5, sum(rate(scheduler_scheduling_algorithm_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.5"
               },
               "record": "cluster_quantile:scheduler_scheduling_algorithm_duration_seconds:histogram_quantile"
            },
            {
               "expr": "histogram_quantile(0.5, sum(rate(scheduler_binding_duration_seconds_bucket{job=\"kube-scheduler\"}[5m])) without(instance, pod))\n",
               "labels": {
                  "quantile": "0.5"
               },
               "record": "cluster_quantile:scheduler_binding_duration_seconds:histogram_quantile"
            }
         ]
      },
      {
         "name": "node.rules",
         "rules": [
            {
               "expr": "sum(min(kube_pod_info) by (cluster, node))\n",
               "record": ":kube_pod_info_node_count:"
            },
            {
               "expr": "max(label_replace(kube_pod_info{job=\"kube-state-metrics\"}, \"pod\", \"$1\", \"pod\", \"(.*)\")) by (node, namespace, pod)\n",
               "record": "node_namespace_pod:kube_pod_info:"
            },
            {
               "expr": "count by (cluster, node) (sum by (node, cpu) (\n  node_cpu_seconds_total{job=\"node-exporter\"}\n* on (namespace, pod) group_left(node)\n  node_namespace_pod:kube_pod_info:\n))\n",
               "record": "node:node_num_cpu:sum"
            },
            {
               "expr": "sum(\n  node_memory_MemAvailable_bytes{job=\"node-exporter\"} or\n  (\n    node_memory_Buffers_bytes{job=\"node-exporter\"} +\n    node_memory_Cached_bytes{job=\"node-exporter\"} +\n    node_memory_MemFree_bytes{job=\"node-exporter\"} +\n    node_memory_Slab_bytes{job=\"node-exporter\"}\n  )\n) by (cluster)\n",
               "record": ":node_memory_MemAvailable_bytes:sum"
            }
         ]
      }
   ]
}
